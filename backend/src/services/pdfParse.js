// src/services/pdfParse.js
import pdf from 'pdf-parse';
import { generateMCQsFromText } from './gemini.services.js'; // Import the Gemini service

/**
 * Parses text content from a Base64 encoded PDF and sends it to Gemini for MCQ generation.
 * @param {string} base64Pdf - The Base64 encoded string of the PDF file.
 * @param {number} [numQuestions=5] - The desired number of MCQs to generate (min 1, max 25). Defaults to 5.
 * @returns {Promise<object>} - A promise that resolves with the generated MCQs in JSON format.
 */
export const parsePdfAndGenerateMcqs = async (base64Pdf, numQuestions = 5) => {
  if (!base64Pdf) {
    throw new Error('No PDF content provided for parsing.');
  }

  const base64Data = base64Pdf.replace(/^data:application\/pdf;base64,/, '');
  const pdfBuffer = Buffer.from(base64Data, 'base64');

  try {
    const data = await pdf(pdfBuffer);
    const parsedText = data.text;

    if (!parsedText || parsedText.trim().length === 0) {
      throw new Error('Could not extract meaningful text from the PDF.');
    }

    console.log('PDF text parsed successfully. Sending to Gemini service...');
    // Pass the numQuestions parameter to the Gemini service
    const mcqs = await generateMCQsFromText(parsedText, numQuestions);

    return mcqs; // Return the MCQs generated by Gemini
  } catch (error) {
    console.error('Error parsing PDF or generating MCQs:', error);
    throw new Error(`Failed to process PDF: ${error.message}`);
  }
};